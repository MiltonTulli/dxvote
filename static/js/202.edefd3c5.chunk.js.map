{"version":3,"sources":["../node_modules/prismjs/components/prism-js-templates.js"],"names":["Prism","templateString","languages","javascript","templateLiteralPattern","pattern","source","interpolationObject","inside","interpolationPunctuationObject","interpolationPattern","createTemplate","language","tag","undefined","RegExp","lookbehind","greedy","alias","filter","Boolean","getPlaceholder","counter","toUpperCase","tokenizeWithHooks","code","grammar","env","hooks","run","tokens","tokenize","tokenizeInterpolationExpression","expression","tempGrammar","length","args","push","apply","splice","Token","tokenizeEmbedded","_tokens","placeholderCounter","placeholderMap","embeddedCode","map","token","interpolationExpression","content","placeholder","indexOf","join","embeddedTokens","placeholders","Object","keys","walkTokens","i","s","index","before","substring","middle","after","replacement","afterTokens","concat","Array","isArray","supportedLanguages","add","findTemplateStrings","l","type","embedded","stringContent","value"],"mappings":"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","file":"static/js/202.edefd3c5.chunk.js","sourcesContent":["(function (Prism) {\n\n\tvar templateString = Prism.languages.javascript['template-string'];\n\n\t// see the pattern in prism-javascript.js\n\tvar templateLiteralPattern = templateString.pattern.source;\n\tvar interpolationObject = templateString.inside['interpolation'];\n\tvar interpolationPunctuationObject = interpolationObject.inside['interpolation-punctuation'];\n\tvar interpolationPattern = interpolationObject.pattern.source;\n\n\n\t/**\n\t * Creates a new pattern to match a template string with a special tag.\n\t *\n\t * This will return `undefined` if there is no grammar with the given language id.\n\t *\n\t * @param {string} language The language id of the embedded language. E.g. `markdown`.\n\t * @param {string} tag The regex pattern to match the tag.\n\t * @returns {object | undefined}\n\t * @example\n\t * createTemplate('css', /\\bcss/.source);\n\t */\n\tfunction createTemplate(language, tag) {\n\t\tif (!Prism.languages[language]) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn {\n\t\t\tpattern: RegExp('((?:' + tag + ')\\\\s*)' + templateLiteralPattern),\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'template-punctuation': {\n\t\t\t\t\tpattern: /^`|`$/,\n\t\t\t\t\talias: 'string'\n\t\t\t\t},\n\t\t\t\t'embedded-code': {\n\t\t\t\t\tpattern: /[\\s\\S]+/,\n\t\t\t\t\talias: language\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\n\n\tPrism.languages.javascript['template-string'] = [\n\t\t// styled-jsx:\n\t\t//   css`a { color: #25F; }`\n\t\t// styled-components:\n\t\t//   styled.h1`color: red;`\n\t\tcreateTemplate('css', /\\b(?:styled(?:\\([^)]*\\))?(?:\\s*\\.\\s*\\w+(?:\\([^)]*\\))*)*|css(?:\\s*\\.\\s*(?:global|resolve))?|createGlobalStyle|keyframes)/.source),\n\n\t\t// html`<p></p>`\n\t\t// div.innerHTML = `<p></p>`\n\t\tcreateTemplate('html', /\\bhtml|\\.\\s*(?:inner|outer)HTML\\s*\\+?=/.source),\n\n\t\t// svg`<path fill=\"#fff\" d=\"M55.37 ...\"/>`\n\t\tcreateTemplate('svg', /\\bsvg/.source),\n\n\t\t// md`# h1`, markdown`## h2`\n\t\tcreateTemplate('markdown', /\\b(?:md|markdown)/.source),\n\n\t\t// gql`...`, graphql`...`, graphql.experimental`...`\n\t\tcreateTemplate('graphql', /\\b(?:gql|graphql(?:\\s*\\.\\s*experimental)?)/.source),\n\n\t\t// vanilla template string\n\t\ttemplateString\n\t].filter(Boolean);\n\n\n\t/**\n\t * Returns a specific placeholder literal for the given language.\n\t *\n\t * @param {number} counter\n\t * @param {string} language\n\t * @returns {string}\n\t */\n\tfunction getPlaceholder(counter, language) {\n\t\treturn '___' + language.toUpperCase() + '_' + counter + '___';\n\t}\n\n\t/**\n\t * Returns the tokens of `Prism.tokenize` but also runs the `before-tokenize` and `after-tokenize` hooks.\n\t *\n\t * @param {string} code\n\t * @param {any} grammar\n\t * @param {string} language\n\t * @returns {(string|Token)[]}\n\t */\n\tfunction tokenizeWithHooks(code, grammar, language) {\n\t\tvar env = {\n\t\t\tcode: code,\n\t\t\tgrammar: grammar,\n\t\t\tlanguage: language\n\t\t};\n\t\tPrism.hooks.run('before-tokenize', env);\n\t\tenv.tokens = Prism.tokenize(env.code, env.grammar);\n\t\tPrism.hooks.run('after-tokenize', env);\n\t\treturn env.tokens;\n\t}\n\n\t/**\n\t * Returns the token of the given JavaScript interpolation expression.\n\t *\n\t * @param {string} expression The code of the expression. E.g. `\"${42}\"`\n\t * @returns {Token}\n\t */\n\tfunction tokenizeInterpolationExpression(expression) {\n\t\tvar tempGrammar = {};\n\t\ttempGrammar['interpolation-punctuation'] = interpolationPunctuationObject;\n\n\t\t/** @type {Array} */\n\t\tvar tokens = Prism.tokenize(expression, tempGrammar);\n\t\tif (tokens.length === 3) {\n\t\t\t/**\n\t\t\t * The token array will look like this\n\t\t\t * [\n\t\t\t *     [\"interpolation-punctuation\", \"${\"]\n\t\t\t *     \"...\" // JavaScript expression of the interpolation\n\t\t\t *     [\"interpolation-punctuation\", \"}\"]\n\t\t\t * ]\n\t\t\t */\n\n\t\t\tvar args = [1, 1];\n\t\t\targs.push.apply(args, tokenizeWithHooks(tokens[1], Prism.languages.javascript, 'javascript'));\n\n\t\t\ttokens.splice.apply(tokens, args);\n\t\t}\n\n\t\treturn new Prism.Token('interpolation', tokens, interpolationObject.alias, expression);\n\t}\n\n\t/**\n\t * Tokenizes the given code with support for JavaScript interpolation expressions mixed in.\n\t *\n\t * This function has 3 phases:\n\t *\n\t * 1. Replace all JavaScript interpolation expression with a placeholder.\n\t *    The placeholder will have the syntax of a identify of the target language.\n\t * 2. Tokenize the code with placeholders.\n\t * 3. Tokenize the interpolation expressions and re-insert them into the tokenize code.\n\t *    The insertion only works if a placeholder hasn't been \"ripped apart\" meaning that the placeholder has been\n\t *    tokenized as two tokens by the grammar of the embedded language.\n\t *\n\t * @param {string} code\n\t * @param {object} grammar\n\t * @param {string} language\n\t * @returns {Token}\n\t */\n\tfunction tokenizeEmbedded(code, grammar, language) {\n\t\t// 1. First filter out all interpolations\n\n\t\t// because they might be escaped, we need a lookbehind, so we use Prism\n\t\t/** @type {(Token|string)[]} */\n\t\tvar _tokens = Prism.tokenize(code, {\n\t\t\t'interpolation': {\n\t\t\t\tpattern: RegExp(interpolationPattern),\n\t\t\t\tlookbehind: true\n\t\t\t}\n\t\t});\n\n\t\t// replace all interpolations with a placeholder which is not in the code already\n\t\tvar placeholderCounter = 0;\n\t\t/** @type {Object<string, string>} */\n\t\tvar placeholderMap = {};\n\t\tvar embeddedCode = _tokens.map(function (token) {\n\t\t\tif (typeof token === 'string') {\n\t\t\t\treturn token;\n\t\t\t} else {\n\t\t\t\tvar interpolationExpression = token.content;\n\n\t\t\t\tvar placeholder;\n\t\t\t\twhile (code.indexOf(placeholder = getPlaceholder(placeholderCounter++, language)) !== -1) { }\n\t\t\t\tplaceholderMap[placeholder] = interpolationExpression;\n\t\t\t\treturn placeholder;\n\t\t\t}\n\t\t}).join('');\n\n\n\t\t// 2. Tokenize the embedded code\n\n\t\tvar embeddedTokens = tokenizeWithHooks(embeddedCode, grammar, language);\n\n\n\t\t// 3. Re-insert the interpolation\n\n\t\tvar placeholders = Object.keys(placeholderMap);\n\t\tplaceholderCounter = 0;\n\n\t\t/**\n\t\t *\n\t\t * @param {(Token|string)[]} tokens\n\t\t * @returns {void}\n\t\t */\n\t\tfunction walkTokens(tokens) {\n\t\t\tfor (var i = 0; i < tokens.length; i++) {\n\t\t\t\tif (placeholderCounter >= placeholders.length) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar token = tokens[i];\n\n\t\t\t\tif (typeof token === 'string' || typeof token.content === 'string') {\n\t\t\t\t\tvar placeholder = placeholders[placeholderCounter];\n\t\t\t\t\tvar s = typeof token === 'string' ? token : /** @type {string} */ (token.content);\n\n\t\t\t\t\tvar index = s.indexOf(placeholder);\n\t\t\t\t\tif (index !== -1) {\n\t\t\t\t\t\t++placeholderCounter;\n\n\t\t\t\t\t\tvar before = s.substring(0, index);\n\t\t\t\t\t\tvar middle = tokenizeInterpolationExpression(placeholderMap[placeholder]);\n\t\t\t\t\t\tvar after = s.substring(index + placeholder.length);\n\n\t\t\t\t\t\tvar replacement = [];\n\t\t\t\t\t\tif (before) {\n\t\t\t\t\t\t\treplacement.push(before);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treplacement.push(middle);\n\t\t\t\t\t\tif (after) {\n\t\t\t\t\t\t\tvar afterTokens = [after];\n\t\t\t\t\t\t\twalkTokens(afterTokens);\n\t\t\t\t\t\t\treplacement.push.apply(replacement, afterTokens);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (typeof token === 'string') {\n\t\t\t\t\t\t\ttokens.splice.apply(tokens, [i, 1].concat(replacement));\n\t\t\t\t\t\t\ti += replacement.length - 1;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttoken.content = replacement;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tvar content = token.content;\n\t\t\t\t\tif (Array.isArray(content)) {\n\t\t\t\t\t\twalkTokens(content);\n\t\t\t\t\t} else {\n\t\t\t\t\t\twalkTokens([content]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\twalkTokens(embeddedTokens);\n\n\t\treturn new Prism.Token(language, embeddedTokens, 'language-' + language, code);\n\t}\n\n\t/**\n\t * The languages for which JS templating will handle tagged template literals.\n\t *\n\t * JS templating isn't active for only JavaScript but also related languages like TypeScript, JSX, and TSX.\n\t */\n\tvar supportedLanguages = {\n\t\t'javascript': true,\n\t\t'js': true,\n\t\t'typescript': true,\n\t\t'ts': true,\n\t\t'jsx': true,\n\t\t'tsx': true,\n\t};\n\tPrism.hooks.add('after-tokenize', function (env) {\n\t\tif (!(env.language in supportedLanguages)) {\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t * Finds and tokenizes all template strings with an embedded languages.\n\t\t *\n\t\t * @param {(Token | string)[]} tokens\n\t\t * @returns {void}\n\t\t */\n\t\tfunction findTemplateStrings(tokens) {\n\t\t\tfor (var i = 0, l = tokens.length; i < l; i++) {\n\t\t\t\tvar token = tokens[i];\n\n\t\t\t\tif (typeof token === 'string') {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tvar content = token.content;\n\t\t\t\tif (!Array.isArray(content)) {\n\t\t\t\t\tif (typeof content !== 'string') {\n\t\t\t\t\t\tfindTemplateStrings([content]);\n\t\t\t\t\t}\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (token.type === 'template-string') {\n\t\t\t\t\t/**\n\t\t\t\t\t * A JavaScript template-string token will look like this:\n\t\t\t\t\t *\n\t\t\t\t\t * [\"template-string\", [\n\t\t\t\t\t *     [\"template-punctuation\", \"`\"],\n\t\t\t\t\t *     (\n\t\t\t\t\t *         An array of \"string\" and \"interpolation\" tokens. This is the simple string case.\n\t\t\t\t\t *         or\n\t\t\t\t\t *         [\"embedded-code\", \"...\"] This is the token containing the embedded code.\n\t\t\t\t\t *                                  It also has an alias which is the language of the embedded code.\n\t\t\t\t\t *     ),\n\t\t\t\t\t *     [\"template-punctuation\", \"`\"]\n\t\t\t\t\t * ]]\n\t\t\t\t\t */\n\n\t\t\t\t\tvar embedded = content[1];\n\t\t\t\t\tif (content.length === 3 && typeof embedded !== 'string' && embedded.type === 'embedded-code') {\n\t\t\t\t\t\t// get string content\n\t\t\t\t\t\tvar code = stringContent(embedded);\n\n\t\t\t\t\t\tvar alias = embedded.alias;\n\t\t\t\t\t\tvar language = Array.isArray(alias) ? alias[0] : alias;\n\n\t\t\t\t\t\tvar grammar = Prism.languages[language];\n\t\t\t\t\t\tif (!grammar) {\n\t\t\t\t\t\t\t// the embedded language isn't registered.\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcontent[1] = tokenizeEmbedded(code, grammar, language);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfindTemplateStrings(content);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfindTemplateStrings(env.tokens);\n\t});\n\n\n\t/**\n\t * Returns the string content of a token or token stream.\n\t *\n\t * @param {string | Token | (string | Token)[]} value\n\t * @returns {string}\n\t */\n\tfunction stringContent(value) {\n\t\tif (typeof value === 'string') {\n\t\t\treturn value;\n\t\t} else if (Array.isArray(value)) {\n\t\t\treturn value.map(stringContent).join('');\n\t\t} else {\n\t\t\treturn stringContent(value.content);\n\t\t}\n\t}\n\n}(Prism));\n"],"sourceRoot":""}