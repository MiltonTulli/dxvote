{"version":3,"sources":["../node_modules/prismjs/components/prism-sass.js"],"names":["Prism","languages","sass","extend","pattern","lookbehind","insertBefore","inside","atrule","variable","operator","important","property"],"mappings":";;;;;AAAC,WAASA,KAAT,EAAgB;AAChBA,OAAK,CAACC,SAAN,CAAgBC,IAAhB,GAAuBF,KAAK,CAACC,SAAN,CAAgBE,MAAhB,CAAuB,KAAvB,EAA8B;AACpD;AACA,eAAW;AACVC,aAAO,EAAE,gDADC;AAEVC,gBAAU,EAAE;AAFF;AAFyC,GAA9B,CAAvB;AAQAL,OAAK,CAACC,SAAN,CAAgBK,YAAhB,CAA6B,MAA7B,EAAqC,QAArC,EAA+C;AAC9C;AACA,mBAAe;AACd;AACAF,aAAO,EAAE,qBAFK;AAGdG,YAAM,EAAE;AACP,kBAAU;AADH;AAHM;AAF+B,GAA/C;AAUA,SAAOP,KAAK,CAACC,SAAN,CAAgBC,IAAhB,CAAqBM,MAA5B;AAGA,MAAIC,QAAQ,GAAG,wBAAf;AACA,MAAIC,QAAQ,GAAG,CACd,0CADc,EAEd;AACCN,WAAO,EAAE,cADV;AAECC,cAAU,EAAE;AAFb,GAFc,CAAf;AAQAL,OAAK,CAACC,SAAN,CAAgBK,YAAhB,CAA6B,MAA7B,EAAqC,UAArC,EAAiD;AAChD;AACA,qBAAiB;AAChBF,aAAO,EAAE,cADO;AAEhBG,YAAM,EAAE;AACP,uBAAe,GADR;AAEP,oBAAYE,QAFL;AAGP,oBAAYC;AAHL;AAFQ,KAF+B;AAUhD;AACA,qBAAiB;AAChBN,aAAO,EAAE,qCADO;AAEhBG,YAAM,EAAE;AACP,oBAAY,CACX,iBADW,EAEX;AACCH,iBAAO,EAAE,YADV;AAECC,oBAAU,EAAE;AAFb,SAFW,CADL;AAQP,uBAAe,GARR;AASP,oBAAYI,QATL;AAUP,oBAAYC,QAVL;AAWP,qBAAaV,KAAK,CAACC,SAAN,CAAgBC,IAAhB,CAAqBS;AAX3B;AAFQ;AAX+B,GAAjD;AA4BA,SAAOX,KAAK,CAACC,SAAN,CAAgBC,IAAhB,CAAqBU,QAA5B;AACA,SAAOZ,KAAK,CAACC,SAAN,CAAgBC,IAAhB,CAAqBS,SAA5B,CA5DgB,CA8DhB;AACA;;AACAX,OAAK,CAACC,SAAN,CAAgBK,YAAhB,CAA6B,MAA7B,EAAqC,aAArC,EAAoD;AACnD,gBAAY;AACXF,aAAO,EAAE,wEADE;AAEXC,gBAAU,EAAE;AAFD;AADuC,GAApD;AAOA,CAvEA,EAuECL,KAvED,CAAD,C","file":"static/js/358.c217c060.chunk.js","sourcesContent":["(function(Prism) {\n\tPrism.languages.sass = Prism.languages.extend('css', {\n\t\t// Sass comments don't need to be closed, only indented\n\t\t'comment': {\n\t\t\tpattern: /^([ \\t]*)\\/[\\/*].*(?:(?:\\r?\\n|\\r)\\1[ \\t]+.+)*/m,\n\t\t\tlookbehind: true\n\t\t}\n\t});\n\n\tPrism.languages.insertBefore('sass', 'atrule', {\n\t\t// We want to consume the whole line\n\t\t'atrule-line': {\n\t\t\t// Includes support for = and + shortcuts\n\t\t\tpattern: /^(?:[ \\t]*)[@+=].+/m,\n\t\t\tinside: {\n\t\t\t\t'atrule': /(?:@[\\w-]+|[+=])/m\n\t\t\t}\n\t\t}\n\t});\n\tdelete Prism.languages.sass.atrule;\n\n\n\tvar variable = /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/;\n\tvar operator = [\n\t\t/[+*\\/%]|[=!]=|<=?|>=?|\\b(?:and|or|not)\\b/,\n\t\t{\n\t\t\tpattern: /(\\s+)-(?=\\s)/,\n\t\t\tlookbehind: true\n\t\t}\n\t];\n\n\tPrism.languages.insertBefore('sass', 'property', {\n\t\t// We want to consume the whole line\n\t\t'variable-line': {\n\t\t\tpattern: /^[ \\t]*\\$.+/m,\n\t\t\tinside: {\n\t\t\t\t'punctuation': /:/,\n\t\t\t\t'variable': variable,\n\t\t\t\t'operator': operator\n\t\t\t}\n\t\t},\n\t\t// We want to consume the whole line\n\t\t'property-line': {\n\t\t\tpattern: /^[ \\t]*(?:[^:\\s]+ *:.*|:[^:\\s]+.*)/m,\n\t\t\tinside: {\n\t\t\t\t'property': [\n\t\t\t\t\t/[^:\\s]+(?=\\s*:)/,\n\t\t\t\t\t{\n\t\t\t\t\t\tpattern: /(:)[^:\\s]+/,\n\t\t\t\t\t\tlookbehind: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t'punctuation': /:/,\n\t\t\t\t'variable': variable,\n\t\t\t\t'operator': operator,\n\t\t\t\t'important': Prism.languages.sass.important\n\t\t\t}\n\t\t}\n\t});\n\tdelete Prism.languages.sass.property;\n\tdelete Prism.languages.sass.important;\n\n\t// Now that whole lines for other patterns are consumed,\n\t// what's left should be selectors\n\tPrism.languages.insertBefore('sass', 'punctuation', {\n\t\t'selector': {\n\t\t\tpattern: /([ \\t]*)\\S(?:,?[^,\\r\\n]+)*(?:,(?:\\r?\\n|\\r)\\1[ \\t]+\\S(?:,?[^,\\r\\n]+)*)*/,\n\t\t\tlookbehind: true\n\t\t}\n\t});\n\n}(Prism));"],"sourceRoot":""}