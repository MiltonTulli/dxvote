{"version":3,"sources":["../node_modules/prismjs/components/prism-parigp.js"],"names":["Prism","languages","parigp","pattern","greedy","keywords","map","keyword","split","join","RegExp","lookbehind"],"mappings":";;;;;AAAAA,KAAK,CAACC,SAAN,CAAgBC,MAAhB,GAAyB;AACxB,aAAW,yBADa;AAExB,YAAU;AACTC,WAAO,EAAE,uBADA;AAETC,UAAM,EAAE;AAFC,GAFc;AAMxB;AACA;AACA;AACA,aAAY,YAAY;AACvB,QAAIC,QAAQ,GAAG,CACd,YADc,EACA,OADA,EACS,UADT,EACqB,SADrB,EACgC,QADhC,EAC0C,OAD1C,EAEd,cAFc,EAEE,QAFF,EAEY,QAFZ,EAEsB,SAFtB,EAEiC,UAFjC,EAGd,SAHc,EAGH,aAHG,EAGY,QAHZ,EAGsB,KAHtB,EAG6B,OAH7B,EAGsC,IAHtC,EAId,OAJc,EAIL,IAJK,EAIC,MAJD,EAIS,QAJT,EAImB,OAJnB,EAI4B,OAJ5B,CAAf;AAMAA,YAAQ,GAAGA,QAAQ,CAACC,GAAT,CAAa,UAAUC,OAAV,EAAmB;AAC1C,aAAOA,OAAO,CAACC,KAAR,CAAc,EAAd,EAAkBC,IAAlB,CAAuB,IAAvB,CAAP;AACA,KAFU,EAERA,IAFQ,CAEH,GAFG,CAAX;AAGA,WAAOC,MAAM,CAAC,WAAWL,QAAX,GAAsB,MAAvB,CAAb;AACA,GAXW,EATY;AAqBxB,cAAY,mBArBY;AAsBxB,YAAU;AACT;AACAF,WAAO,EAAE,2GAFA;AAGTQ,cAAU,EAAE;AAHH,GAtBc;AA2BxB,cAAY,qLA3BY;AA4BxB,iBAAe;AA5BS,CAAzB,C","file":"static/js/284.c217c060.chunk.js","sourcesContent":["Prism.languages.parigp = {\n\t'comment': /\\/\\*[\\s\\S]*?\\*\\/|\\\\\\\\.*/,\n\t'string': {\n\t\tpattern: /\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"/,\n\t\tgreedy: true\n\t},\n\t// PARI/GP does not care about white spaces at all\n\t// so let's process the keywords to build an appropriate regexp\n\t// (e.g. \"b *r *e *a *k\", etc.)\n\t'keyword': (function () {\n\t\tvar keywords = [\n\t\t\t'breakpoint', 'break', 'dbg_down', 'dbg_err', 'dbg_up', 'dbg_x',\n\t\t\t'forcomposite', 'fordiv', 'forell', 'forpart', 'forprime',\n\t\t\t'forstep', 'forsubgroup', 'forvec', 'for', 'iferr', 'if',\n\t\t\t'local', 'my', 'next', 'return', 'until', 'while'\n\t\t];\n\t\tkeywords = keywords.map(function (keyword) {\n\t\t\treturn keyword.split('').join(' *');\n\t\t}).join('|');\n\t\treturn RegExp('\\\\b(?:' + keywords + ')\\\\b');\n\t}()),\n\t'function': /\\w[\\w ]*?(?= *\\()/,\n\t'number': {\n\t\t// The lookbehind and the negative lookahead prevent from breaking the .. operator\n\t\tpattern: /((?:\\. *\\. *)?)(?:\\b\\d(?: *\\d)*(?: *(?!\\. *\\.)\\.(?: *\\d)*)?|\\. *\\d(?: *\\d)*)(?: *e *[+-]? *\\d(?: *\\d)*)?/i,\n\t\tlookbehind: true\n\t},\n\t'operator': /\\. *\\.|[*\\/!](?: *=)?|%(?: *=|(?: *#)?(?: *')*)?|\\+(?: *[+=])?|-(?: *[-=>])?|<(?:(?: *<)?(?: *=)?| *>)?|>(?: *>)?(?: *=)?|=(?: *=){0,2}|\\\\(?: *\\/)?(?: *=)?|&(?: *&)?|\\| *\\||['#~^]/,\n\t'punctuation': /[\\[\\]{}().,:;|]/\n};\n"],"sourceRoot":""}