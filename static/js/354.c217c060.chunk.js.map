{"version":3,"sources":["../node_modules/prismjs/components/prism-rust.js"],"names":["Prism","multilineComment","source","i","replace","languages","rust","pattern","RegExp","lookbehind","greedy","alias","inside","rest"],"mappings":"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","file":"static/js/354.c217c060.chunk.js","sourcesContent":["(function (Prism) {\n\n\tvar multilineComment = /\\/\\*(?:[^*/]|\\*(?!\\/)|\\/(?!\\*)|<self>)*\\*\\//.source;\n\tfor (var i = 0; i < 2; i++) {\n\t\t// support 4 levels of nested comments\n\t\tmultilineComment = multilineComment.replace(/<self>/g, function () { return multilineComment; });\n\t}\n\tmultilineComment = multilineComment.replace(/<self>/g, function () { return /[^\\s\\S]/.source; });\n\n\n\tPrism.languages.rust = {\n\t\t'comment': [\n\t\t\t{\n\t\t\t\tpattern: RegExp(/(^|[^\\\\])/.source + multilineComment),\n\t\t\t\tlookbehind: true,\n\t\t\t\tgreedy: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tpattern: /(^|[^\\\\:])\\/\\/.*/,\n\t\t\t\tlookbehind: true,\n\t\t\t\tgreedy: true\n\t\t\t}\n\t\t],\n\t\t'string': {\n\t\t\tpattern: /b?\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|b?r(#*)\"(?:[^\"]|\"(?!\\1))*\"\\1/,\n\t\t\tgreedy: true\n\t\t},\n\t\t'char': {\n\t\t\tpattern: /b?'(?:\\\\(?:x[0-7][\\da-fA-F]|u{(?:[\\da-fA-F]_*){1,6}|.)|[^\\\\\\r\\n\\t'])'/,\n\t\t\tgreedy: true,\n\t\t\talias: 'string'\n\t\t},\n\t\t'attribute': {\n\t\t\tpattern: /#!?\\[(?:[^\\[\\]\"]|\"(?:\\\\[\\s\\S]|[^\\\\\"])*\")*\\]/,\n\t\t\tgreedy: true,\n\t\t\talias: 'attr-name',\n\t\t\tinside: {\n\t\t\t\t'string': null // see below\n\t\t\t}\n\t\t},\n\n\t\t// Closure params should not be confused with bitwise OR |\n\t\t'closure-params': {\n\t\t\tpattern: /([=(,:]\\s*|\\bmove\\s*)\\|[^|]*\\||\\|[^|]*\\|(?=\\s*(?:\\{|->))/,\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'closure-punctuation': {\n\t\t\t\t\tpattern: /^\\||\\|$/,\n\t\t\t\t\talias: 'punctuation'\n\t\t\t\t},\n\t\t\t\trest: null // see below\n\t\t\t}\n\t\t},\n\n\t\t'lifetime-annotation': {\n\t\t\tpattern: /'\\w+/,\n\t\t\talias: 'symbol'\n\t\t},\n\n\t\t'fragment-specifier': {\n\t\t\tpattern: /(\\$\\w+:)[a-z]+/,\n\t\t\tlookbehind: true,\n\t\t\talias: 'punctuation'\n\t\t},\n\t\t'variable': /\\$\\w+/,\n\n\t\t'function-definition': {\n\t\t\tpattern: /(\\bfn\\s+)\\w+/,\n\t\t\tlookbehind: true,\n\t\t\talias: 'function'\n\t\t},\n\t\t'type-definition': {\n\t\t\tpattern: /(\\b(?:enum|struct|union)\\s+)\\w+/,\n\t\t\tlookbehind: true,\n\t\t\talias: 'class-name'\n\t\t},\n\t\t'module-declaration': [\n\t\t\t{\n\t\t\t\tpattern: /(\\b(?:crate|mod)\\s+)[a-z][a-z_\\d]*/,\n\t\t\t\tlookbehind: true,\n\t\t\t\talias: 'namespace'\n\t\t\t},\n\t\t\t{\n\t\t\t\tpattern: /(\\b(?:crate|self|super)\\s*)::\\s*[a-z][a-z_\\d]*\\b(?:\\s*::(?:\\s*[a-z][a-z_\\d]*\\s*::)*)?/,\n\t\t\t\tlookbehind: true,\n\t\t\t\talias: 'namespace',\n\t\t\t\tinside: {\n\t\t\t\t\t'punctuation': /::/\n\t\t\t\t}\n\t\t\t}\n\t\t],\n\t\t'keyword': [\n\t\t\t// https://github.com/rust-lang/reference/blob/master/src/keywords.md\n\t\t\t/\\b(?:abstract|as|async|await|become|box|break|const|continue|crate|do|dyn|else|enum|extern|final|fn|for|if|impl|in|let|loop|macro|match|mod|move|mut|override|priv|pub|ref|return|self|Self|static|struct|super|trait|try|type|typeof|union|unsafe|unsized|use|virtual|where|while|yield)\\b/,\n\t\t\t// primitives and str\n\t\t\t// https://doc.rust-lang.org/stable/rust-by-example/primitives.html\n\t\t\t/\\b(?:[ui](?:8|16|32|64|128|size)|f(?:32|64)|bool|char|str)\\b/\n\t\t],\n\n\t\t// functions can technically start with an upper-case letter, but this will introduce a lot of false positives\n\t\t// and Rust's naming conventions recommend snake_case anyway.\n\t\t// https://doc.rust-lang.org/1.0.0/style/style/naming/README.html\n\t\t'function': /\\b[a-z_]\\w*(?=\\s*(?:::\\s*<|\\())/,\n\t\t'macro': {\n\t\t\tpattern: /\\w+!/,\n\t\t\talias: 'property'\n\t\t},\n\t\t'constant': /\\b[A-Z_][A-Z_\\d]+\\b/,\n\t\t'class-name': /\\b[A-Z]\\w*\\b/,\n\n\t\t'namespace': {\n\t\t\tpattern: /(?:\\b[a-z][a-z_\\d]*\\s*::\\s*)*\\b[a-z][a-z_\\d]*\\s*::(?!\\s*<)/,\n\t\t\tinside: {\n\t\t\t\t'punctuation': /::/\n\t\t\t}\n\t\t},\n\n\t\t// Hex, oct, bin, dec numbers with visual separators and type suffix\n\t\t'number': /\\b(?:0x[\\dA-Fa-f](?:_?[\\dA-Fa-f])*|0o[0-7](?:_?[0-7])*|0b[01](?:_?[01])*|(?:\\d(?:_?\\d)*)?\\.?\\d(?:_?\\d)*(?:[Ee][+-]?\\d+)?)(?:_?(?:[iu](?:8|16|32|64|size)?|f32|f64))?\\b/,\n\t\t'boolean': /\\b(?:false|true)\\b/,\n\t\t'punctuation': /->|\\.\\.=|\\.{1,3}|::|[{}[\\];(),:]/,\n\t\t'operator': /[-+*\\/%!^]=?|=[=>]?|&[&=]?|\\|[|=]?|<<?=?|>>?=?|[@?]/\n\t};\n\n\tPrism.languages.rust['closure-params'].inside.rest = Prism.languages.rust;\n\tPrism.languages.rust['attribute'].inside['string'] = Prism.languages.rust['string'];\n\n}(Prism));\n"],"sourceRoot":""}